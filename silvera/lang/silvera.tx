Module:
    imports*=Import
    decls*=Declaration
;

Import:
    'import' import_url=STRING
;


Declaration:
    ConfigServerDecl | ServiceRegistryDecl | ServiceDecl | APIGateway | Connection | MessagePool | MessageBroker
;

ConfigServerDecl:
    'config-server' name=ID '{'
        'search_path' '=' search_path=STRING
        deployment=Deployment
    '}'
;

ServiceRegistryDecl:
    'service-registry' name=ID '{'
        'tool' '=' tool=ServiceRegistryTool
        'client_mode' '=' client_mode=BOOL
        deployment=Deployment
    '}'
;

ServiceRegistryTool:
    "eureka" | "zookeeper" | "consul"
;

APIGateway:
    'api-gateway' name=ID '{'
        ('config_server' '=' config_server=FQN)?
        ('service_registry' '=' service_registry=FQN)?

        deployment=Deployment

        'communication_style' '=' comm_style=CommunicationStyle

        'gateway-for' '{'
            gateway_for+=GatewayFor
        '}'
    '}'
;

GatewayFor:
    service=[ServiceDecl] 'as' url=STRING
;

ServiceDecl:
    'service' name=ID ('extends' extends=FQN)? '{'

        ('config_server' '=' config_server=FQN)?
        ('service_registry' '=' service_registry=FQN)?

        (deployment=Deployment)?

        'communication_style' '=' comm_style=CommunicationStyle

        (api=APIDecl)?
        (handlers=MessagingHandlers)?
    '}'
;

Deployment:
    'deployment' '{'
        (
            ('version' '=' version=STRING)? |
            ('url' '=' url=STRING)? |
            ('port' '=' port=INT)? |
            ('lang' '=' lang=STRING)? |
            ('packaging' '=' packaging=STRING)? |
            ('host' '=' host=HostChoice)? |
            ('replicas' '=' replicas=INT)? |
            (restart_policy=RestartPolicy)?
        )#
    '}'
;

RestartPolicy:
    'restart-policy' '{'
        (
            ('condition' '=' condition=RestartCondition)? |
            ('delay' '=' delay=INT)? |
            ('max_attempts' '=' max_attempts=INT)? |
            ('window' '=' window=INT)?
        )#
    '}'
;

RestartCondition:
    "any" | "on-failure"
;

APIDecl:
    'api' '{'
        typedefs*=TypeDef
        functions*=Function
    '}'
;

MessagingHandlers:
    'handlers' '{'
        handlers+=Handler
    '}'
;

Connection:
    'connection' start=FQN '->' end=FQN '{'
        circuit_break_defs*=CBPerMethod
    '}'
;

CBPerMethod:
    method_name=ID '[' failure_pattern=CBFailurePattern (fallback_method=ID)? ']'
;

CBFailurePattern:
    'fail_fast' | 'fail_silent' | 'fallback_static' | 'fallback_stubbed' | 'fallback_cache' | 'fallback_method'
;

MessagePool:
    'msg-pool' '{'
        commands*=CommandMessage
        events?=Events
    '}'
;

CommandMessage:
    'command' name=ID '['
        fields+=TypeField
    ']'
;

Events:
    'events' '['
        events+=ID
    ']'
;

MessageBroker:
    'msg-broker' name=ID '{'
        channels+=MessageChannel
    '}'
;

MessageChannel:
    'channel' name=ID '(' msg_type=ID ')'
;

TypeDef:
    'typedef' name=ID (':' inherits+=FQN[','])? '['
        fields+=TypeField
    ']'
;

TypeField:
    (id=INT ':')? type=DataType name=ID
;

HostChoice:
    "PC" | "VM" | "container" | "serverless"
;

CommunicationStyle:
    //"REST" | "gRPC" | "thrift" | "kafka" | "RabbitMQ" | "custom"
    "rpc" | "messaging"
;

Annotation:
    "@async" | RESTAnnotation | "@thrift" | MessagingAnnotation
;

RESTAnnotation:
    '@rest' '('
        (
            ('method' '=' method=HTTPMethod)? |
            ('mapping' '=' mapping=STRING)?
        )#
    ')'
;

HTTPMethod:
    'POST' | 'PUT' | 'GET' | 'DELETE'
;


MessagingAnnotation:
    Producer | Consumer
;

Producer:
    '@producer' '(' message=ID '->' channel_fqn=FQN ')'
;

Consumer:
    '@consumer' '(' subscribtions+=ConsumerSubs[','] ')'
;

ConsumerSubs:
    message=ID '<-' channel_fqn=FQN
;

Function:
    annotations*=Annotation
    ret_type=ReturnType name=ID '(' params*=FunctionParameter[','] ')'
;

FunctionParameter:
    type=DataType name=ID ('='default=DefaultValue)? (':'name_mapping=ID)?
;


Handler:
    annotations+=MessagingAnnotation
    name=ID '(' ')'
;

DefaultValue:
    'none' | STRING | FLOAT | INT | BOOL
;

ReturnType:
    'void' | DataType
;

DataType:
    Number | Collection | Date | FQN
;

Date:
    'date'
;

Number:
    Integer | Float
;

Integer:
    'i16' | 'i32' | 'i64' | 'bool' | 'int'
;

Float:
    'float' | 'double'
;

Collection:
    Sequence | Set | Dict
;

Sequence:
    String | List
;

String:
    'str'
;

List:
    TypedList | NonTypedList
;

TypedList:
    'list' '<' type=DataType '>' ('[' len=INT ']')?
;

NonTypedList:
    'list'
;

Set:
    TypedSet | NonTypedSet
;

TypedSet:
    'set' '<' type=DataType '>'
;

NonTypedSet:
    'set'
;

Dict:
    TypedDict | NonTypedDict
;

TypedDict:
    'dict' '<' key_type=DataType ',' value_type=DataType '>'
;

NonTypedDict:
    'dict'
;

FQN:
    ID+['.']
;

// Special rule for comments. Comments start with //
Comment:
    /\/\/.*$/
;