/**
    THIS IS GENERATED CODE AND SHOULD NOT BE CHANGED MANUALLY!!!

    Generated by: silvera
    Date: {{timestamp}}
*/

package com.silvera.{{package_name}}.config;


import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.common.header.Headers;
import org.springframework.kafka.support.serializer.JsonDeserializer;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.List;

{%set messages_path = "com.silvera." + service_name + ".messages" %}


public class MessageDeserializer extends JsonDeserializer<{{messages_path}}.Message> {

    @Override
    public {{messages_path}}.Message deserialize(String topic, byte[] data) {
        ObjectMapper objectMapper = new ObjectMapper();

        {{messages_path}}.Message message = null;
        try {
            message = objectMapper.readValue(data, {{messages_path}}.Message.class);
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (message == null){
            return null;
        }
        {{messages_path}}.Message retMsg = message;
        List<{{messages_path}}.MessageField> fields = message.getFields();

        {% for msg in messages %}
        if(message.getName().equals("{{msg.fqn}}")){
            retMsg = new {{messages_path}}.{{msg.parent.fqn|lower}}.{{msg.name}}();
        }
        {% endfor %}

        // Try to map JSON fields to class fields.
        for({{messages_path}}.MessageField msgField : fields) {
            for (Field f : message.getClass().getFields()) {
                if(f.getName().equals(msgField.getName())){
                    try {
                        f.set(retMsg, msgField.getValue());
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        // TODO: Map annotations

        return retMsg;
    }

    @Override
    public {{messages_path}}.Message deserialize(String topic, Headers headers, byte[] data) {
        return deserialize(topic, data);
    }
}


