/**
    THIS IS GENERATED CODE AND SHOULD NOT BE CHANGED MANUALLY!!!

    Generated by: silvera
    Date: {{timestamp}}
*/

{% macro function_body(function) %}
    {% if function.ret_type == "void" %}
    service.{{function.name}}({{function|param_names}});
    {% else %}
    {{function.ret_type|converttype}} result = service.{{function.name}}({{function|param_names}});
    {% endif%}

    {% for msg, channel in function.produces %}
    Message msg = new Message("{{msg.name}}");
    kafkaTemplate.send("{{channel.name}}", msg);
    {% endfor %}

    {% if function.ret_type != "void" %}
    return result;
    {% endif %}
{% endmacro %}

{%- macro rest_annotation(function) %}
{% if function.http_verb == "POST" %}
    @PostMapping(value = "{{function.rest_path}}")
{% elif function.http_verb == "GET" %}
    @GetMapping(value="{{function.rest_path}}")
{% elif function.http_verb == "PUT" %}
    @PutMapping(value="{{function.rest_path}}")
{% elif function.http_verb == "DELETE" %}
    @DeleteMapping(value="{{function.rest_path}}")
{% endif %}
{% endmacro -%}

package com.silvera.{{service_name}}.controller;

import java.util.Collection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import com.silvera.{{service_name}}.service.*;
import com.silvera.{{service_name}}.domain.model.*;
import com.silvera.{{service_name}}.messages.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;


@RefreshScope
@RestController
public class {{service_name}}Controller {

    @Autowired
    I{{service_name}}Service service;

    @Autowired
    KafkaTemplate<String, Message> kafkaTemplate;

    //
    // Public functions
    //
    {% for function in api.functions %}
    {{rest_annotation(function)}}
    public {{function.ret_type|converttype}} {{function.name}}({{function|unfold_function_params_rest}}){
        {{function_body(function)|indent}}
    }
    {% endfor %}

    //
    // Message consumers
    //
    {% for function in api.internal.functions %}
    {% set topics = function|topics %}
    @KafkaListener(topics = { {{topics}} })
    public void {{function.name}}(Message message){
        service.{{function.name}}(message);

        {% for msg, channel in function.produces %}
        Message msg = new Message({{msg.name}});
        kafkaTemplate.send("{{channel.name}}", msg);
        {% endfor %}
    }
    {% endfor %}
}