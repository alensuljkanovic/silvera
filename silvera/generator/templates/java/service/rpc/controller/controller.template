/**
    THIS IS GENERATED CODE AND SHOULD NOT BE CHANGED MANUALLY!!!

    Generated by: silvera
    Date: {{timestamp}}
*/

{% macro function_body(function) %}
{%- set service_call = service_name|firstlower + "Service." + function.name + "(" + function|param_names + ")" -%}
{% if function.is_async() %}
    {% if function.ret_type == "void" %}
    {{function|return_type}} future = new {{function|return_type}}();
    {{service_call}};
    future.complete(null);
    {% else %}
    {{function|return_type}} future = {{service_call}};
    return future.get();
    {% endif %}
{% else %}
    {{"return" if function.ret_type != "void" else ""}} {{service_name|firstlower}}Service.{{function.name}}({{function|param_names}});
{% endif -%}
{% endmacro %}


{%- macro rest_annotation(function) %}
{% if function.http_verb == "POST" %}
    @PostMapping(value = "{{function.rest_path}}")
{% elif function.http_verb == "GET" %}
    @GetMapping(value="{{function.rest_path}}")
{% elif function.http_verb == "PUT" %}
    @PutMapping(value="{{function.rest_path}}")
{% elif function.http_verb == "DELETE" %}
    @DeleteMapping(value="{{function.rest_path}}")
{% endif %}
{% endmacro -%}

package com.silvera.{{service_name}}.controller;

import java.util.Collection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import javax.validation.Valid;

import com.silvera.{{service_name}}.service.base.I{{service_name}}Service;
import com.silvera.{{service_name}}.domain.model.*;

{% if async %}
import java.util.concurrent.CompletableFuture;
{% endif %}

@RefreshScope
@RestController
public class {{service_name}}Controller {

    @Autowired
    I{{service_name}}Service {{service_name|firstlower}}Service;

    // Auto-generated CRUD methods
    {%for typedef, id_datatype, crud_dict in typedefs %}
    {% set id_datatype = id_datatype|converttype %}
    {% if "@create" in crud_dict %}
    @RequestMapping(value="/{{typedef|lower}}", method=RequestMethod.POST)
    @ResponseBody
    public {{typedef}} create{{typedef}}(@Valid @RequestBody {{typedef}} {{typedef|lower}}){
        return {{service_name|firstlower}}Service.create{{typedef}}({{typedef|lower}});
    }
    {% endif %}
    {% if "@update" in crud_dict %}
    @RequestMapping(value="/{{typedef|lower}}/{id}", method=RequestMethod.PUT)
    @ResponseBody
    public {{typedef}} update{{typedef}}(@PathVariable {{id_datatype}} id, @Valid @RequestBody {{typedef}} {{typedef|lower}}){
        return {{service_name|firstlower}}Service.update{{typedef}}(id, {{typedef|lower}});
    }
    {% endif %}
    {% if "@read" in crud_dict %}
    @RequestMapping(value="/{{typedef|lower}}/{id}", method=RequestMethod.GET)
    @ResponseBody
    public {{typedef}} read{{typedef}}(@PathVariable {{id_datatype}} id){
        return {{service_name|firstlower}}Service.read{{typedef}}(id);
    }
    {% endif %}
    {% if "@delete" in crud_dict %}
    @RequestMapping(value="/{{typedef|lower}}/{id}", method=RequestMethod.DELETE)
    @ResponseBody
    public void delete{{typedef}}(@PathVariable {{id_datatype}} id){
        {{service_name|firstlower}}Service.delete{{typedef}}(id);
    }
    {% endif %}
    {% endfor%}



    {% for function in api.functions %}
        {% set service_call = service_name|firstlower + "Service." + function.name + "(" + function|param_names %}
    {{rest_annotation(function)}}
    @ResponseBody
    public {{function.ret_type|converttype}} {{function.name}}({{function|unfold_function_params_rest}}) {{'throws InterruptedException, java.util.concurrent.ExecutionException ' if function.is_async() else ''}}{
        {{function_body(function)|indent}}
    }
    {% endfor %}

}